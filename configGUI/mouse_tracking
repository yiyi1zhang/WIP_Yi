import json
import pickle

import pydicom
from pydicom.data.data_manager import get_files
from matplotlib.widgets import Widget

import numpy as np

import matplotlib.pyplot as plt

with open('configGUI/lastWorkspace.json', 'r') as json_data:
    lastState = json.load(json_data)
pathlist = lastState['Pathes']
ind = lastState['Index'][-1]
ind2 = lastState['Index2'][-1]
ind3 = lastState['Index3'][-1]

correslist = lastState['Corres']
shapelist = lastState['Shape']

dirname = get_files(pathlist[-1], '*')
dirname.sort()
filename = dirname[ind]

dataset = pydicom.dcmread(filename)

listA = open('config/dump1.txt', 'rb')
list1 = pickle.load(listA)
listA.close()
if correslist == []:
    voxel = list1[0]
    shape = shapelist[0]
else:
    voxel = list1[correslist[0]]
    shape = shapelist[correslist[0]]

fig, ax = plt.subplots(2, 2, figsize=(8, 6))

axXY = ax[0, 0]
axXY.imshow(np.swapaxes(voxel[:, :, ind], 0, 1), cmap=plt.cm.bone, vmin=0, vmax=2094)
axXY.autoscale(True)
axXY.set_title('XY')
axYZ = ax[0, 1]
axYZ.imshow(np.swapaxes(voxel[ind2, :, :], 0, 1), cmap=plt.cm.bone, vmin=0, vmax=2094,
            extent=[0, shape[1], shape[2], 0], interpolation='sinc')
axYZ.autoscale(True)
axYZ.set_title('YZ')
axXZ = ax[1, 1]
axXZ.imshow(np.swapaxes(voxel[:, ind3, :], 0, 1), cmap=plt.cm.bone, vmin=0, vmax=2094,
            extent = [0, shape[0], shape[2], 0], interpolation='sinc')
axXZ.autoscale(True)
axXZ.set_title('XZ')
axN = ax[1, 0]
axN.axis('off')

ind1 = ind+1
fig.canvas.set_window_title('Mouse Tracking on slice ' + str(ind1))

class Cursor_3D(Widget):

    def __init__(self, canvas, axes, useblit=True, xOn=True, yOn=True, zOn=True,
                 **lineprops):
        self.ind = ind
        self.ind2 = ind2
        self.ind3 = ind3
        self.canvas = canvas
        self.axes = axes #in the sequence of (XY, YZ, XZ)
        self.xOn = xOn
        self.yOn = yOn
        self.zOn = zOn

        xmin, xmax = axes[0].get_xlim()
        ymin, ymax = axes[1].get_xlim()
        zmin, zmax = axes[2].get_ylim()
        xmid = 0.5 * (xmin + xmax)
        ymid = 0.5 * (ymin + ymax)
        zmid = 0.5 * (zmin + zmax)

        self.visible = True
        self.useblit = useblit and self.canvas.supports_blit
        self.background = None
        self.needclear = False

        if self.useblit:
            lineprops['animated'] = True

        if xOn:
            self.xlines = [axes[0].axvline(xmid, visible=False, **lineprops),
                           axes[2].axvline(xmid, visible=False, **lineprops)]
        else:
            self.xlines = []

        if yOn:
            self.ylines = [axes[0].axhline(ymid, visible=False, **lineprops),
                           axes[1].axvline(ymid, visible=False, **lineprops),]
        else:
            self.ylines = []

        if zOn:
            self.zlines = [axes[1].axhline(zmid, visible=False, **lineprops),
                           axes[2].axhline(zmid, visible=False, **lineprops),]
        else:
            self.zlines = []

        self.connect()


    def connect(self):
        """connect events"""
        self._cidmotion = self.canvas.mpl_connect('motion_notify_event',
                                                  self.onmove)
        self._cidmotion = self.canvas.mpl_connect('button_press_event',
                                                  self.onclick)
        self._ciddraw = self.canvas.mpl_connect('draw_event', self.clear)


    def disconnect(self):
        """disconnect events"""
        self.canvas.mpl_disconnect(self._cidmotion)
        self.canvas.mpl_disconnect(self._ciddraw)


    def clear(self, event):
        """clear the cursor"""
        if self.ignore(event):
            return
        if self.useblit:
            self.background = (
                self.canvas.copy_from_bbox(self.canvas.figure.bbox))
        for line in self.xlines + self.ylines + self.zlines:
            line.set_visible(False)


    def onmove(self,event):
        if self.ignore(event):
            return
        if event.inaxes is None:
            return
        if not self.canvas.widgetlock.available(self):
            return
        self.needclear = True
        if not self.visible:
            return
        if self.xOn:
            for line in self.xlines:
                line.set_xdata((self.ind2, self.ind2))
                line.set_visible(self.visible)
        if self.yOn:
            self.ylines[0].set_ydata((self.ind3, self.ind3))
            self.ylines[1].set_xdata((self.ind3, self.ind3))
            self.ylines[0].set_visible(self.visible)
            self.ylines[1].set_visible(self.visible)
        if self.zOn:
            for line in self.zlines:
                line.set_ydata((self.ind * 3.3, self.ind * 3.3))
                line.set_visible(self.visible)
        self._update_move()


    def onclick(self, event):
        if self.ignore(event):
            return
        if event.inaxes is None:
            return
        if not self.canvas.widgetlock.available(self):
            return
        self.needclear = True
        if not self.visible:
            return
        if self.xOn:
            if event.inaxes == axXY or event.inaxes == axXZ:
                for line in self.xlines:
                    line.set_xdata((event.xdata, event.xdata))
                    line.set_visible(self.visible)
                    self.ind2 = int(event.xdata)
            else:
                for line in self.xlines:
                    line.set_xdata((self.ind2, self.ind2))
                    line.set_visible(self.visible)
        if self.yOn:
            if event.inaxes == axXY:
                self.ylines[0].set_ydata((event.ydata, event.ydata))
                self.ylines[1].set_xdata((event.ydata, event.ydata))
                self.ylines[0].set_visible(self.visible)
                self.ylines[1].set_visible(self.visible)
                self.ind3 = int(event.ydata)
            elif event.inaxes == axYZ:
                self.ylines[0].set_ydata((event.xdata, event.xdata))
                self.ylines[1].set_xdata((event.xdata, event.xdata))
                self.ylines[0].set_visible(self.visible)
                self.ylines[1].set_visible(self.visible)
                self.ind3 = int(event.xdata)
            else:
                self.ylines[0].set_ydata((self.ind3, self.ind3))
                self.ylines[1].set_xdata((self.ind3, self.ind3))
                self.ylines[0].set_visible(self.visible)
                self.ylines[1].set_visible(self.visible)
        if self.zOn:
            if event.inaxes == axXZ or event.inaxes == axYZ:
                for line in self.zlines:
                    line.set_ydata((event.ydata, event.ydata))
                    line.set_visible(self.visible)
                    self.ind = int(event.ydata // 3.3)
            else:
                for line in self.zlines:
                    line.set_ydata((self.ind*3.3, self.ind*3.3))
                    line.set_visible(self.visible)
        self._update_click()


    def _update_move(self):
        if self.useblit:
            if self.background is not None:
                self.canvas.restore_region(self.background)
            if self.xOn:
                for ax, line in zip(self.axes, self.xlines):
                    ax.draw_artist(line)
            if self.yOn:
                for ax, line in zip(self.axes, self.ylines):
                    ax.draw_artist(line)
            if self.zOn:
                for ax, line in zip(self.axes, self.zlines):
                    ax.draw_artist(line)
            self.canvas.blit(self.canvas.figure.bbox)
        else:
            self.canvas.draw_idle()


    def _update_click(self):
        if self.useblit:
            if self.background is not None:
                self.canvas.restore_region(self.background)
            if self.xOn:
                axYZ.imshow(np.swapaxes(voxel[self.ind2, :, :], 0, 1), cmap=plt.cm.bone, vmin=0, vmax=2094,
                            extent=[0, shape[1], shape[2], 0], interpolation='sinc')
                axYZ.autoscale(True)
                for ax, line in zip(self.axes, self.xlines):
                    ax.draw_artist(line)
            if self.yOn:
                axXZ.imshow(np.swapaxes(voxel[:, self.ind3, :], 0, 1), cmap=plt.cm.bone, vmin=0, vmax=2094,
                            extent=[0, shape[0], shape[2], 0], interpolation='sinc')
                axXZ.autoscale(True)
                for ax, line in zip(self.axes, self.ylines):
                    ax.draw_artist(line)
            if self.zOn:
                axXY.imshow(np.swapaxes(voxel[:, :, self.ind], 0, 1), cmap=plt.cm.bone, vmin=0, vmax=2094)
                axXY.autoscale(True)
                ind1 = self.ind + 1
                fig.canvas.set_window_title('Mouse Tracking on slice ' + str(ind1))
                for ax, line in zip(self.axes, self.zlines):
                    ax.draw_artist(line)
            self.canvas.blit(self.canvas.figure.bbox)
            self.canvas.draw()
        else:
            self.canvas.draw_idle()


cursor = Cursor_3D(fig.canvas, (axXY, axYZ, axXZ), color='blue', linestyle='dashed')

pat_name = dataset.PatientName
display_name = pat_name.family_name + ", " + pat_name.given_name
rows = int(dataset.Rows)
cols = int(dataset.Columns)
t = (
     "\nStorage type.....: "+dataset.SOPClassUID+
     "\nPatient's name...: "+display_name+
     "\nPatient id.......: "+dataset.PatientID+
     "\nStudy Date.......: "+dataset.StudyDate+
     "\nModality.........: "+dataset.Modality+
     "\nImage size.......: {rows:d} x {cols:d}, {size:d} bytes".format(rows=rows, cols=cols, size=len(dataset.PixelData))+
     "\nPixel spacing....: "+str(dataset.PixelSpacing)
     )
axN.annotate(t, (0.5, 0.5),
             xycoords="axes fraction", va="center", ha="center",
             bbox=dict(boxstyle="round, pad=1", fc="w"))

plt.show()